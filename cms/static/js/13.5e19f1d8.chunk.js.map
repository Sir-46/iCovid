{"version":3,"sources":["views/FAQ/index.jsx","config/index.js","services/Fetch.js","services/api.js"],"names":["Paragraph","Typography","Index","colums","title","dataIndex","width","render","text","src","copyable","intent","map","item","responseId","_id","useState","loading","setLoading","response","setResponse","setIntent","useEffect","GetIntent","then","res","message","data","GetResponse","columns","dataSource","rowKey","scroll","x","pagination","pageSize","length","url_api","Fetch","a","method","token","path","url","fetch","headers","Accept","Authorization","body","JSON","stringify","json","datas","sessionStorage","getItem","getData","getListCase","getTrend"],"mappings":"0RAMQA,EAAcC,IAAdD,UA+DOE,UA7DD,WACZ,IAAMC,EAAS,CACb,CACEC,MAAO,UACPC,UAAW,UACXC,MAAO,IACPC,OAAQ,SAACC,GAAD,OAAU,kBAAC,IAAD,CAAWC,IAAKD,MAEpC,CACEJ,MAAO,aACPC,UAAW,MACXE,OAAQ,SAACC,GAAD,OAAU,kBAACR,EAAD,CAAWU,UAAQ,GAAEF,KAEzC,CACEJ,MAAO,WACPC,UAAW,MACXE,OAAQ,SAACC,GACP,OACE,kBAACR,EAAD,CAAWU,UAAQ,GAChBC,EAAOC,KAAI,SAACC,GAAD,OAAUA,EAAKC,aAAeN,GAAQK,EAAKE,WAnB/C,EA0BYC,oBAAS,GA1BrB,mBA0BXC,EA1BW,KA0BFC,EA1BE,OA2BcF,mBAAS,IA3BvB,mBA2BXG,EA3BW,KA2BDC,EA3BC,OA4BUJ,mBAAS,IA5BnB,mBA4BXL,EA5BW,KA4BHU,EA5BG,KA6ClB,OAfAC,qBAAU,WACRJ,GAAW,GACXK,cAAYC,MAAK,SAACC,GACI,YAAhBA,EAAIC,SACNL,EAAUI,EAAIE,SAGlBC,cAAcJ,MAAK,SAACC,GACE,YAAhBA,EAAIC,UACNN,EAAYK,EAAIE,MAChBT,GAAW,SAGd,IAGD,6BACE,kBAAC,IAAD,CAAMd,MAAM,gBACV,kBAAC,IAAD,CACEa,QAASA,EACTY,QAAS1B,EACT2B,WAAYX,EACZY,OAAO,UACPC,OAAQ,CAAEC,GAAG,GACbC,WAAY,CAAEC,SAAUhB,EAASiB,c,0OC9D9BC,EAAU,4CCEVC,EAAK,uCAAG,oDAAAC,EAAA,6DAAOC,EAAP,+BAAgB,OAAQC,EAAxB,uBAA+BC,EAA/B,uBAAqCf,EAArC,+BAA4C,GAA5C,SAEXgB,EAFW,UAEFN,GAFE,OAEQK,GAFR,SAGCE,MAAMD,EAAK,CAC3BE,QAAS,CACPC,OAAQ,mBACRC,cAAyB,KAAVN,EAAe,UAAYA,EAAQ,IAEpDD,OAAQA,GAAU,OAClBQ,KAAiB,SAAXR,EAAoBS,KAAKC,UAAUvB,GAAQ,OATlC,cAGXF,EAHW,iBAWGA,EAAI0B,OAXP,eAWXC,EAXW,yBAYVA,GAZU,2HAAH,qDCDZX,EAAQY,eAAeC,QAAQ,SAExBC,EAAO,uCAAG,4BAAAhB,EAAA,sEACHK,MAChB,2DACA,CACEJ,OAAQ,QAJS,cACff,EADe,yBAQdA,EAAI0B,QARU,2CAAH,qDAWPK,EAAW,uCAAG,4BAAAjB,EAAA,sEACPK,MAChB,uDACA,CACEJ,OAAQ,QAJa,cACnBf,EADmB,yBAQlBA,EAAI0B,QARc,2CAAH,qDAWXM,EAAQ,uCAAG,4BAAAlB,EAAA,sEACJK,MAChB,0DACA,CACEJ,OAAQ,QAJU,cAChBf,EADgB,yBAOfA,EAAI0B,QAPW,2CAAH,qDAURvB,EAAW,uCAAG,4BAAAW,EAAA,sEACPD,EAAM,OAAQG,EAAT,mBADE,cACnBhB,EADmB,yBAElBA,GAFkB,2CAAH,qDAKXF,EAAS,uCAAG,4BAAAgB,EAAA,sEACLD,EAAM,OAAQG,EAAT,iBADA,cACjBhB,EADiB,yBAEhBA,GAFgB,2CAAH","file":"static/js/13.5e19f1d8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Card, Table, Typography } from \"antd\";\nimport { GetResponse, GetIntent } from \"../../services/api\";\n\nimport ReactJson from \"react-json-view\";\n\nconst { Paragraph } = Typography;\n\nconst Index = () => {\n  const colums = [\n    {\n      title: \"message\",\n      dataIndex: \"message\",\n      width: 100,\n      render: (text) => <ReactJson src={text} />,\n    },\n    {\n      title: \"responseId\",\n      dataIndex: \"_id\",\n      render: (text) => <Paragraph copyable>{text}</Paragraph>,\n    },\n    {\n      title: \"intentId\",\n      dataIndex: \"_id\",\n      render: (text) => {\n        return (\n          <Paragraph copyable>\n            {intent.map((item) => item.responseId === text && item._id)}\n          </Paragraph>\n        );\n      },\n    },\n  ];\n\n  const [loading, setLoading] = useState(false);\n  const [response, setResponse] = useState([]);\n  const [intent, setIntent] = useState([]);\n\n  useEffect(() => {\n    setLoading(true);\n    GetIntent().then((res) => {\n      if (res.message === \"success\") {\n        setIntent(res.data);\n      }\n    });\n    GetResponse().then((res) => {\n      if (res.message === \"success\") {\n        setResponse(res.data);\n        setLoading(false);\n      }\n    });\n  }, []);\n\n  return (\n    <div>\n      <Card title=\"Respone List\">\n        <Table\n          loading={loading}\n          columns={colums}\n          dataSource={response}\n          rowKey=\"message\"\n          scroll={{ x: true }}\n          pagination={{ pageSize: response.length }}\n        />\n      </Card>\n    </div>\n  );\n};\n\nexport default Index;\n","export const url_api = \"https://covid.thetripleinnovation.com/api\";\n","import { url_api } from \"../config\";\n\nexport const Fetch = async (method = \"POST\", token, path, data = {}) => {\n  try {\n    const url = `${url_api}${path}`;\n    const res = await fetch(url, {\n      headers: {\n        Accept: \"application/json\",\n        Authorization: token !== \"\" ? \"Bearer \" + token : \"\"\n      },\n      method: method || \"POST\",\n      body: method === \"POST\" ? JSON.stringify(data) : null\n    });\n    const datas = await res.json();\n    return datas;\n  } catch (error) {\n    return error;\n  }\n};\n","import { Fetch } from \"./Fetch\";\nconst token = sessionStorage.getItem(\"token\");\n\nexport const getData = async () => {\n  const res = await fetch(\n    \"https://covid19-cdn.workpointnews.com/api/constants.json\",\n    {\n      method: \"GET\",\n    }\n  );\n\n  return res.json();\n};\n\nexport const getListCase = async () => {\n  const res = await fetch(\n    \"https://covid19-cdn.workpointnews.com/api/cases.json\",\n    {\n      method: \"GET\",\n    }\n  );\n\n  return res.json();\n};\n\nexport const getTrend = async () => {\n  const res = await fetch(\n    \"https://covid19-cdn.workpointnews.com/api/trend/th.json\",\n    {\n      method: \"GET\",\n    }\n  );\n  return res.json();\n};\n\nexport const GetResponse = async () => {\n  const res = await Fetch(\"POST\", token, `/response/lists`);\n  return res;\n};\n\nexport const GetIntent = async () => {\n  const res = await Fetch(\"POST\", token, `/intent/lists`);\n  return res;\n};\n"],"sourceRoot":""}